Perfect. This shift to a fully **custom open-source stack** will give you total control and freedom. Youâ€™ll essentially be building a **modular sports analysis platform** without the AWS lock-in. Below is a **complete architecture plan**, listing all the components you need, frameworks to use, and a file structure to organize it all.

---

## âœ… **High-Level Stack Overview**

### **Frontend (React + Next.js)**

* **Framework:** [Next.js](https://nextjs.org/) (SSR + static export + API routes)
* **UI Library:** TailwindCSS (fast styling)
* **State Management:** Zustand or Redux (Zustand is simpler)
* **Video Player:** React Player / custom HTML5 `<video>`
* **Overlay Drawing:** [Konva.js](https://konvajs.org/) (canvas shapes/lines on video)

---

### **Backend (Node.js + Express/Fastify)**

* **Web Server:** Express.js (or Fastify for better perf)
* **AI Integration:** REST endpoint that calls Anthropic Claude 3.5 Sonnet API
* **Pose Estimation:** [OpenPose](https://github.com/CMU-Perceptual-Computing-Lab/openpose) or [MediaPipe](https://github.com/google/mediapipe) via Python microservice
* **Storage:** Local file storage initially â†’ later S3-compatible storage (e.g. MinIO)

---

### **Database**

* **Choice:** PostgreSQL (with Prisma ORM for dev speed)
* **Tables:**

  * Users (id, name, email, password\_hash, role)
  * Videos (id, user\_id, file\_path, created\_at)
  * Feedback (id, video\_id, analysis\_text, overlay\_data, created\_at)

---

### **Authentication**

* **Option 1:** NextAuth.js (JWT-based)
* **Option 2:** Custom JWT Auth (bcrypt for passwords)

---

## âœ… **Core Components Needed**

1. **Authentication Pages**

   * `/login`
   * `/signup`
   * `/logout`

2. **Dashboard**

   * Video list
   * Upload button
   * Feedback display per video
   * Video player with toggleable overlay

3. **Upload System**

   * Frontend uploads to backend via `POST /upload`
   * Backend saves to `uploads/` folder
   * Stores metadata in DB

4. **Pose Estimation Service**

   * Python microservice (Flask/FastAPI)
   * Accepts video, runs pose detection, outputs JSON of keypoints
   * Can run locally using MediaPipe or MoveNet (TensorFlow Lite)

5. **AI Analysis Service**

   * Node backend calls Anthropic Claude 3.5 Sonnet
   * Sends pose keypoints + user context â†’ gets feedback
   * Stores results in DB

6. **Overlay Drawing**

   * React + Konva.js to draw lines/arrows over video frames
   * Stores overlay data in DB (JSON)

7. **Generative Feedback Display**

   * Text output from AI
   * Optionally speech synthesis (later)

---

## âœ… **Project Structure**

```
sportgen-ai/
â”‚â”€â”€ backend/
â”‚   â”œâ”€â”€ server.js               # Express server
â”‚   â”œâ”€â”€ routes/
â”‚   â”‚   â”œâ”€â”€ auth.js             # Login/signup
â”‚   â”‚   â”œâ”€â”€ video.js            # Upload/list videos
â”‚   â”‚   â””â”€â”€ analysis.js         # AI + pose endpoints
â”‚   â”œâ”€â”€ services/
â”‚   â”‚   â”œâ”€â”€ anthropicService.js # Calls Claude API
â”‚   â”‚   â””â”€â”€ poseService.js      # Talks to Python pose API
â”‚   â”œâ”€â”€ db/
â”‚   â”‚   â”œâ”€â”€ prisma/             # Prisma schema
â”‚   â”‚   â””â”€â”€ index.js            # DB init
â”‚   â””â”€â”€ uploads/                # Stored video files
â”‚
â”‚â”€â”€ pose-service/               # Python microservice
â”‚   â”œâ”€â”€ app.py                  # FastAPI server
â”‚   â””â”€â”€ model/                  # MediaPipe/OpenPose code
â”‚
â”‚â”€â”€ frontend/
â”‚   â”œâ”€â”€ pages/
â”‚   â”‚   â”œâ”€â”€ index.tsx           # Landing/login
â”‚   â”‚   â”œâ”€â”€ dashboard.tsx       # Dashboard
â”‚   â”‚   â”œâ”€â”€ upload.tsx          # Upload page
â”‚   â”‚   â””â”€â”€ video/[id].tsx      # Video analysis page
â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”œâ”€â”€ VideoPlayer.tsx     # Player with overlay toggle
â”‚   â”‚   â””â”€â”€ OverlayCanvas.tsx   # Konva.js overlay
â”‚   â””â”€â”€ lib/
â”‚       â””â”€â”€ api.ts              # API calls
â”‚
â”‚â”€â”€ .env                        # API keys & DB URL
â”‚â”€â”€ package.json
â”‚â”€â”€ README.md
```

---

## âœ… **Additional Considerations**

* **Local Development:** Use Docker for DB + Python service
* **Deployment:** Can use DigitalOcean, Render, or your own VPS
* **Security:** JWT tokens for API calls, bcrypt for passwords
* **Scalability:** Later replace local storage with MinIO or Backblaze B2

---

## âœ… **Next Steps**

1. **Initialize Next.js + Express backend**
2. **Set up PostgreSQL + Prisma**
3. **Implement simple upload + list videos**
4. **Add Python pose estimation service**
5. **Integrate AI feedback with Claude**
6. **Add overlay + draw feature**
7. **Polish UI & make it production-ready**

---

ðŸ”¥ **Do you want me to give you the full starter boilerplate (frontend + backend + pose service) in one go** so you can just clone and run it in VS Code?

I can write:

* `backend/server.js` (Express API)
* `pose-service/app.py` (FastAPI with MediaPipe)
* `frontend` Next.js pages with a working upload & dashboard

ðŸ‘‰ Shall I proceed with **Step 1: Full minimal boilerplate (React + Node + DB)**?
